"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8791],{2936:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272","title":"AverageColors\u5e73\u5747\u989c\u8272","description":"Direct Download","source":"@site/docs/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272.md","sourceDirName":"Ai_JSX\u811a\u672c","slug":"/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272","permalink":"/docs/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u83dc\u5355\u547d\u4ee4","permalink":"/docs/Adobe-illustrator/\u83dc\u5355\u547d\u4ee4"},"next":{"title":"AverageStrokesWidth","permalink":"/docs/Ai_JSX\u811a\u672c/AverageStrokesWidth"}}');var o=e(4848),a=e(8453);const s={},i=void 0,l={},c=[];function p(r){const n={a:"a",code:"code",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://rebrand.ly/avgcols",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Direct%20Link-AverageColors.jsx-FF6900.svg",alt:"Direct"})})," ",(0,o.jsx)(n.a,{href:"https://bit.ly/2M0j95N",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Download%20All-Zip%20archive-0088CC.svg",alt:"Download"})})]}),"\n",(0,o.jsxs)(n.p,{children:["\u5bf9\u6240\u9009\u5bf9\u8c61\u7684\u989c\u8272\u8fdb\u884c\u5e73\u5747\uff0c\u6216\u5728\u7ec4\u6216\u68af\u5ea6\u5185\u5206\u522b\u8fdb\u884c\u5e73\u5747\u3002\u811a\u672c\u4f1a\u8df3\u8fc7\u6ca1\u6709\u989c\u8272\u6216\u6709\u56fe\u6848\u7684\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u4e1c\u897f\uff0c\u811a\u672c\u4f1a\u5904\u7406\u6587\u6863\u4e2d\u7684\u6240\u6709\u7ec4\u3002\u5b83\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a\u65e0\u58f0\u548c\u5bf9\u8bdd\u3002\u5728",(0,o.jsx)(n.code,{children:"CFG.showUI"}),"\u4e2d\u6539\u53d8\u3002"]}),"\n",(0,o.jsxs)(n.p,{children:["\u5982\u679c\u4f60\u5728\u8fd0\u884c\u811a\u672c\u65f6\u6309\u4f4f ",(0,o.jsx)("kbd",{children:"Alt"})," \u952e\uff0c\u6a21\u5f0f\u7684\u6539\u53d8\u4e0d\u9700\u8981\u7f16\u8f91\u4ee3\u7801:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)("kbd",{children:"Alt"})," + ",(0,o.jsx)(n.code,{children:"CFG.showUI: false"})," \u5c06\u4f1a\u663e\u793a\u5bf9\u8bdd\u6846\u3002"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)("kbd",{children:"Alt"})," + ",(0,o.jsx)(n.code,{children:"CFG.showUI: true"})," \u65e0\u58f0\u6a21\u5f0f\uff0c\u6709\u6700\u65b0\u7684\u9009\u9879"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"AverageColors",src:e(8394).A+"",width:"650",height:"390"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"/*\r\n  AverageColors.jsx for Adobe Illustrator\r\n  Description: Averages the colors of selected objects or separately inside groups or gradients\r\n              Hold Alt on launch to show dialog if showUI: false\r\n              or run in silent mode with the latest settings if showUI: true\r\n  Date: March, 2022\r\n  Author: Sergey Osokin, email: hi@sergosokin.ru\r\n\r\n  Installation: https://github.com/creold/illustrator-scripts#how-to-run-scripts\r\n\r\n  Release notes:\r\n  0.1 Initial version\r\n\r\n  Donate (optional):\r\n  If you find this script helpful, you can buy me a coffee\r\n  - via Buymeacoffee: https://www.buymeacoffee.com/osokin\r\n  - via FanTalks https://fantalks.io/r/sergey\r\n  - via DonatePay https://new.donatepay.ru/en/@osokin\r\n  - via YooMoney https://yoomoney.ru/to/410011149615582\r\n\r\n  NOTICE:\r\n  Tested with Adobe Illustrator CC 2018-2022 (Mac), 2022 (Win).\r\n  This script is provided \"as is\" without warranty of any kind.\r\n  Free to use, not for sale\r\n\r\n  Released under the MIT license\r\n  http://opensource.org/licenses/mit-license.php\r\n\r\n  Check my other scripts: https://github.com/creold\r\n*/\r\n\r\n//@target illustrator\r\napp.preferences.setBooleanPreference('ShowExternalJSXWarning', false); // Fix drag and drop a .jsx file\r\n\r\n// Main function\r\nfunction main() {\r\n  var SCRIPT = {\r\n        name    : 'Average Colors',\r\n        version : 'v.0.1'\r\n      },\r\n      CFG = {\r\n        isIsolateGrp  : false,   // Process groups separately\r\n        isGradient    : false,  // Process only gradients to solid colors\r\n        isFill        : true,   // Averaging fills\r\n        isStroke      : true,   // Averaging strokes\r\n        showUI        : true    // Silent mode or dialog\r\n      },\r\n      SETTINGS = {\r\n        name: SCRIPT.name.replace(/\\s/g, '_') + '_data.json',\r\n        folder: Folder.myDocuments + '/Adobe Scripts/'\r\n      };\r\n\r\n  if (!documents.length) {\r\n    alert('Error\\nOpen a document and try again');\r\n    return;\r\n  }\r\n\r\n  if (selection.typename === 'TextRange') return;\r\n\r\n  var isAltPressed = false;\r\n\r\n  if (ScriptUI.environment.keyboardState.altKey) {\r\n    isAltPressed = true;\r\n  }\r\n\r\n  if ((CFG.showUI && !isAltPressed) || (!CFG.showUI && isAltPressed)) { // Show dialog\r\n    invokeUI(SCRIPT, CFG, SETTINGS);\r\n  } else if (CFG.showUI && isAltPressed) { // Silent mode with the latest settings\r\n    var params = loadSettings(SETTINGS);\r\n    if (params.length) process(params[0], params[1], params[2], params[3]);\r\n  } else { // Silent mode with the default settings\r\n    process(CFG.isIsolateGrp, CFG.isGradient, CFG.isFill, CFG.isStroke);\r\n  }\r\n}\r\n\r\n/**\r\n * Save UI options to file\r\n * @param {Object} cfgFile - Settings file\r\n * @param {Array} params - Options status\r\n */\r\nfunction saveSettings(cfgFile, params) {\r\n  if(!Folder(cfgFile.folder).exists) Folder(cfgFile.folder).create();\r\n  var $file = new File(cfgFile.folder + cfgFile.name);\r\n  $file.encoding = 'UTF-8';\r\n  $file.open('w');\r\n  var pref = {};\r\n  pref.isIsolateGrp = params[0];\r\n  pref.isGradient = params[1];\r\n  pref.isFill = params[2];\r\n  pref.isStroke = params[3];\r\n  var data = pref.toSource();\r\n  $file.write(data);\r\n  $file.close();\r\n}\r\n\r\n/**\r\n * Load options from file\r\n * @param {Object} cfgFile - Settings file\r\n * @return {Array} out - Options status\r\n */\r\nfunction loadSettings(cfgFile) {\r\n  var out = [], $file = File(cfgFile.folder + cfgFile.name);\r\n  if ($file.exists) {\r\n    try {\r\n      $file.encoding = 'UTF-8';\r\n      $file.open('r');\r\n      var json = $file.readln();\r\n      var pref = new Function('return ' + json)();\r\n      $file.close();\r\n      if (typeof pref != 'undefined') {\r\n        out[0] = pref.isIsolateGrp;\r\n        out[1] = pref.isGradient;\r\n        out[2] = pref.isFill;\r\n        out[3] = pref.isStroke;\r\n      }\r\n    } catch (e) {}\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Show UI\r\n * @param {Object} title - The script name\r\n * @param {Object} cfg - Default settings\r\n * @param {Object} cfgFile - Settings file\r\n */\r\nfunction invokeUI(title, cfg, cfgFile) {\r\n  var params = loadSettings(cfgFile);\r\n\r\n  var dialog = new Window('dialog', title.name + ' ' + title.version);\r\n      dialog.orientation = 'column';\r\n      dialog.alignChildren = ['fill', 'center'];\r\n      dialog.opacity = .96;\r\n\r\n  var wrapper = dialog.add('panel');\r\n      wrapper.orientation = 'column';\r\n      wrapper.alignChildren = ['fill','top'];\r\n      wrapper.margins = 10;\r\n\r\n  var isIsolateGrp = wrapper.add('checkbox', undefined, 'Isolate Groups');\r\n      isIsolateGrp.value = params.length ? params[0] : cfg.isIsolateGrp;\r\n\r\n  var isGradient = wrapper.add('checkbox', undefined, 'Gradients Only');\r\n      isGradient.value = params.length ? params[1] : (cfg.isIsolateGrp ? false : cfg.isGradient);\r\n\r\n  var isFill = wrapper.add('checkbox', undefined, 'Fill Colors');\r\n      isFill.value = params.length ? params[2] : cfg.isFill;\r\n\r\n  var isStroke = wrapper.add('checkbox', undefined, 'Stroke Colors');\r\n      isStroke.value = params.length ? params[3] : cfg.isStroke;\r\n\r\n  var btns = dialog.add('group');\r\n      btns.orientation = 'column';\r\n      btns.alignChildren = ['fill', 'center'];\r\n\r\n  var cancel = btns.add('button', undefined, 'Cancel', { name: 'cancel' });\r\n  var ok = btns.add('button', undefined, 'Ok',  { name: 'ok' });\r\n\r\n  var copyright = dialog.add('statictext', undefined, 'Visit Github');\r\n      copyright.justify = 'center';\r\n\r\n  isIsolateGrp.onClick = function() {\r\n    if (this.value) isGradient.value = false;\r\n  }\r\n\r\n  isGradient.onClick = function() {\r\n    if (this.value) isIsolateGrp.value = false;\r\n  }\r\n\r\n  cancel.onClick = dialog.close;\r\n\r\n  ok.onClick = function() {\r\n    var params = [isIsolateGrp.value, isGradient.value, isFill.value, isStroke.value];\r\n    saveSettings(cfgFile, params);\r\n    process(params[0], params[1], params[2], params[3]);\r\n    dialog.close();\r\n  }\r\n\r\n  copyright.addEventListener('mousedown', function () {\r\n    openURL('https://github.com/creold');\r\n  });\r\n\r\n  dialog.center();\r\n  dialog.show();\r\n}\r\n\r\n/**\r\n * Run processing \r\n * @param {boolean} isIsolateGrp - Groups separately\r\n * @param {boolean} isGradient - Only gradients to solid colors\r\n * @param {boolean} isFill - Averaging fills\r\n * @param {boolean} isStroke - Averaging strokes\r\n */\r\nfunction process(isIsolateGrp, isGradient, isFill, isStroke) {\r\n  var groups;\r\n\r\n  if (!selection.length) {\r\n    var isConfirm = confirm('Selection is empty\\n' +\r\n                    'Process all visible unlocked groups\\n' +\r\n                    'in the document?');\r\n    \r\n    if (isConfirm) {\r\n      app.executeMenuCommand('selectall');\r\n      groups = getGroups(selection);\r\n      app.executeMenuCommand('deselectall');\r\n    } else {\r\n      return; // Exit\r\n    }\r\n  } else {\r\n    var paths = getPaths(selection, isIsolateGrp);\r\n\r\n    if (paths.length) {\r\n      if (isFill) {\r\n        if (isGradient) recolorGradients(paths, 'fillColor');\r\n        else recolor(paths, 'fillColor');\r\n      }\r\n  \r\n      if (isStroke) {\r\n        if (isGradient) recolorGradients(paths, 'strokeColor');\r\n        else recolor(paths, 'strokeColor');\r\n      }\r\n    }\r\n\r\n    if (!isIsolateGrp) return; // Exit\r\n\r\n    groups = getGroups(selection);\r\n  }\r\n\r\n  // Process groups separately\r\n  forEach(groups, function(e) {\r\n    var grpPaths = getPaths(e.pageItems, false);\r\n\r\n    if (isFill) recolor(grpPaths, 'fillColor');\r\n    if (isStroke) recolor(grpPaths, 'strokeColor');\r\n  });\r\n}\r\n\r\n/**\r\n * Get top-level groups\r\n * @param {(Object|Array)} collection - PageItems set\r\n * @return {Array} out - Top-Level groups\r\n */\r\nfunction getGroups(collection) {\r\n  var out = [];\r\n\r\n  forEach(collection, function(e) {\r\n    if (/group/i.test(e.typename)) out.push(e);\r\n  });\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get paths in group\r\n * @param {(Object|Array)} collection - PageItems set\r\n * @param {boolean} isIsolateGrp - Include group content\r\n * @return {Array} out - Single paths\r\n */\r\nfunction getPaths(collection, isIsolateGrp) {\r\n  var out = [];\r\n\r\n  forEach(collection, function(e) {\r\n    if (e.pageItems && e.pageItems.length && !isIsolateGrp) {\r\n      out = [].concat(out, getPaths(e.pageItems));\r\n    } else if (/compound/i.test(e.typename) && e.pathItems.length) {\r\n      out = [].concat(out, getPaths(e.pathItems));\r\n    } else if (/pathitem/i.test(e.typename)) {\r\n      out.push(e);\r\n    }\r\n  });\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Recolor objects\r\n * @param {Array} collection - Paths\r\n * @param {string} type - Color property for the path\r\n */\r\nfunction recolor(collection, type) {\r\n  var colors = getColors(collection, type),\r\n      avgColor = averageColors(colors);\r\n\r\n  forEach(collection, function(e) {\r\n    if ((/fill/i.test(type) && e.filled) ||\r\n        (/stroke/i.test(type) && e.stroked)) {\r\n      e[type] = avgColor;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Recolor only gradients separately\r\n * @param {Array} collection - Paths\r\n * @param {string} type - Color property for the path\r\n */\r\nfunction recolorGradients(collection, type) {\r\n  forEach(collection, function(e) {\r\n    if ((/fill/i.test(type) && e.filled && /gradient/i.test(e[type])) ||\r\n        (/stroke/i.test(type) && e.stroked && /gradient/i.test(e[type]))) {\r\n      var colors = getColors([e], type),\r\n      avgColor = averageColors(colors);\r\n      e[type] = avgColor;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get solid colors\r\n * @param {Array} collection - Paths\r\n * @param {string} type - Color property for the path\r\n * @return {Array} out - Colors \r\n */\r\nfunction getColors(collection, type) {\r\n  var out = [];\r\n\r\n  forEach(collection, function(e) {\r\n    var hasFill = /fill/i.test(type) && e.filled && !/pattern/i.test(e[type].typename),\r\n        hasStroke = /stroke/i.test(type) && e.stroked && !/pattern/i.test(e[type].typename);\r\n\r\n    if (!hasFill && !hasStroke) return;\r\n\r\n    if (/gradient/i.test(e[type].typename)) {\r\n      var gColor = e[type].gradient,\r\n          gLen = gColor.gradientStops.length;\r\n      for (var i = 0; i < gLen; i++) {\r\n        out.push(gColor.gradientStops[i].color);\r\n      }\r\n    } else {\r\n      out.push(e[type]);\r\n    }\r\n  });\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Average solid colors\r\n * @param {Array} colors - All paths colors\r\n * @return {object} avgColor - Average color\r\n */\r\nfunction averageColors(colors) {\r\n  var isRgb = activeDocument.documentColorSpace === DocumentColorSpace.RGB,\r\n      len = colors.length,\r\n      cSum = {}; // Sum of color channels\r\n\r\n  forEach(colors, function(e) {\r\n    if (/spot/i.test(e.typename)) e = getSpotTint(e);\r\n    if (/gray/i.test(e.typename)) e.red = e.green = e.blue = e.black = e.gray;\r\n    for (var key in e) {\r\n      if (typeof e[key] === 'number') {\r\n        if (cSum[key]) cSum[key] += e[key];\r\n        else cSum[key] = e[key];\r\n      }\r\n    }\r\n  });\r\n\r\n  var avgColor = isRgb ? new RGBColor() : new CMYKColor();\r\n  for (var key in cSum) {\r\n    avgColor[key] = Math.floor(cSum[key] / len);\r\n  }\r\n\r\n  return avgColor;\r\n}\r\n\r\n/**\r\n * Get true solid color from Spot\r\n * @param {Object} color - Spot color\r\n * @return {Object} Solid color\r\n */\r\nfunction getSpotTint(color) {\r\nvar isRgb = activeDocument.documentColorSpace === DocumentColorSpace.RGB,\r\n    white, tintVal = [];\r\n\r\n  if (isRgb) {\r\n    white = new RGBColor();\r\n    white.red = 255;\r\n    white.green = 255;\r\n    white.blue = 255;\r\n  } else {\r\n    white = new CMYKColor();\r\n  }\r\n\r\n  var t = color.tint / 100,\r\n      spot = color.spot.color;\r\n\r\n  for (var key in spot) {\r\n    if (typeof spot[key] === 'number') {\r\n      tintVal.push(lerp(white[key], spot[key], t));\r\n    }\r\n  }\r\n\r\n  return setColor(tintVal, isRgb);\r\n}\r\n\r\n/**\r\n * Calc linear interpolation\r\n * @param {number} start - Start value\r\n * @param {number} end - End value\r\n * @param {number} t - Percentage (value from 0.0 to 1.0)\r\n * @return {number} New value\r\n */\r\nfunction lerp(start, end, t) {\r\n  return start + (end - start) * t;\r\n}\r\n\r\n/**\r\n * Create color from array of values\r\n * @param {Array} arr - Channels values\r\n * @param {boolean} isRgb - Is the RGB document mode\r\n * @return {Object} color\r\n */\r\nfunction setColor(arr, isRgb) {\r\n  var color;\r\n\r\n  if (isRgb) {\r\n    color = new RGBColor();\r\n    color.red = arr[0];\r\n    color.green = arr[1];\r\n    color.blue = arr[2];\r\n  } else {\r\n    color = new CMYKColor();\r\n    color.cyan = arr[0];\r\n    color.magenta = arr[1];\r\n    color.yellow = arr[2];\r\n    color.black = arr[3];\r\n  }\r\n\r\n  return color;\r\n}\r\n\r\n/**\r\n * Calls a provided callback function once for each element in an array\r\n * @param {Array} collection - Elements\r\n * @param {Function} fn - The callback function\r\n */\r\nfunction forEach(collection, fn) {\r\n  for (var i = 0, len = collection.length; i < len; i++) {\r\n    fn(collection[i]);\r\n  }\r\n}\r\n\r\n/**\r\n * Open link in browser\r\n * @param {string} url - Website adress\r\n */\r\nfunction openURL(url) {\r\n  var html = new File(Folder.temp.absoluteURI + '/aisLink.html');\r\n  html.open('w');\r\n  var htmlBody = '<html><head><META HTTP-EQUIV=Refresh CONTENT=\"0; URL=' + url + '\"></head><body> <p></body></html>';\r\n  html.write(htmlBody);\r\n  html.close();\r\n  html.execute();\r\n}\r\n\r\ntry {\r\n  main();\r\n} catch (e) {}```\n"})})]})}function u(r={}){const{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,o.jsx)(n,{...r,children:(0,o.jsx)(p,{...r})}):p(r)}},8394:(r,n,e)=>{e.d(n,{A:()=>t});const t=e.p+"assets/images/AverageColors-445974600b4434df10d1eaeb81687fd0.gif"},8453:(r,n,e)=>{e.d(n,{R:()=>s,x:()=>i});var t=e(6540);const o={},a=t.createContext(o);function s(r){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function i(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:s(r.components),t.createElement(a.Provider,{value:n},r.children)}}}]);