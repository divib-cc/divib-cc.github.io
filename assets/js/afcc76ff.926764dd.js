"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4337],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={},l=void 0,i={unversionedId:"Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272",id:"Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272",title:"AverageColors\u5e73\u5747\u989c\u8272",description:"Direct Download",source:"@site/docs/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272.md",sourceDirName:"Ai_JSX\u811a\u672c",slug:"/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272",permalink:"/docs/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272",draft:!1,editUrl:"https://github.com/divib-cc/divib-cc.github.io/docs/Ai_JSX\u811a\u672c/AverageColors\u5e73\u5747\u989c\u8272.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u83dc\u5355\u547d\u4ee4",permalink:"/docs/Adobe-illustrator/\u83dc\u5355\u547d\u4ee4"},next:{title:"AverageStrokesWidth",permalink:"/docs/Ai_JSX\u811a\u672c/AverageStrokesWidth"}},s={},c=[],p={toc:c};function u(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rebrand.ly/avgcols"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Direct%20Link-AverageColors.jsx-FF6900.svg",alt:"Direct"}))," ",(0,o.kt)("a",{parentName:"p",href:"https://bit.ly/2M0j95N"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Download%20All-Zip%20archive-0088CC.svg",alt:"Download"}))),(0,o.kt)("p",null,"\u5bf9\u6240\u9009\u5bf9\u8c61\u7684\u989c\u8272\u8fdb\u884c\u5e73\u5747\uff0c\u6216\u5728\u7ec4\u6216\u68af\u5ea6\u5185\u5206\u522b\u8fdb\u884c\u5e73\u5747\u3002\u811a\u672c\u4f1a\u8df3\u8fc7\u6ca1\u6709\u989c\u8272\u6216\u6709\u56fe\u6848\u7684\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u4e1c\u897f\uff0c\u811a\u672c\u4f1a\u5904\u7406\u6587\u6863\u4e2d\u7684\u6240\u6709\u7ec4\u3002\u5b83\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a\u65e0\u58f0\u548c\u5bf9\u8bdd\u3002\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"CFG.showUI"),"\u4e2d\u6539\u53d8\u3002  "),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u5728\u8fd0\u884c\u811a\u672c\u65f6\u6309\u4f4f ",(0,o.kt)("kbd",null,"Alt")," \u952e\uff0c\u6a21\u5f0f\u7684\u6539\u53d8\u4e0d\u9700\u8981\u7f16\u8f91\u4ee3\u7801:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("kbd",null,"Alt")," + `CFG.showUI: false` \u5c06\u4f1a\u663e\u793a\u5bf9\u8bdd\u6846\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("kbd",null,"Alt")," + `CFG.showUI: true` \u65e0\u58f0\u6a21\u5f0f\uff0c\u6709\u6700\u65b0\u7684\u9009\u9879")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"AverageColors",src:t(3944).Z,width:"650",height:"390"})," "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"/*\n  AverageColors.jsx for Adobe Illustrator\n  Description: Averages the colors of selected objects or separately inside groups or gradients\n              Hold Alt on launch to show dialog if showUI: false\n              or run in silent mode with the latest settings if showUI: true\n  Date: March, 2022\n  Author: Sergey Osokin, email: hi@sergosokin.ru\n\n  Installation: https://github.com/creold/illustrator-scripts#how-to-run-scripts\n\n  Release notes:\n  0.1 Initial version\n\n  Donate (optional):\n  If you find this script helpful, you can buy me a coffee\n  - via Buymeacoffee: https://www.buymeacoffee.com/osokin\n  - via FanTalks https://fantalks.io/r/sergey\n  - via DonatePay https://new.donatepay.ru/en/@osokin\n  - via YooMoney https://yoomoney.ru/to/410011149615582\n\n  NOTICE:\n  Tested with Adobe Illustrator CC 2018-2022 (Mac), 2022 (Win).\n  This script is provided \"as is\" without warranty of any kind.\n  Free to use, not for sale\n\n  Released under the MIT license\n  http://opensource.org/licenses/mit-license.php\n\n  Check my other scripts: https://github.com/creold\n*/\n\n//@target illustrator\napp.preferences.setBooleanPreference('ShowExternalJSXWarning', false); // Fix drag and drop a .jsx file\n\n// Main function\nfunction main() {\n  var SCRIPT = {\n        name    : 'Average Colors',\n        version : 'v.0.1'\n      },\n      CFG = {\n        isIsolateGrp  : false,   // Process groups separately\n        isGradient    : false,  // Process only gradients to solid colors\n        isFill        : true,   // Averaging fills\n        isStroke      : true,   // Averaging strokes\n        showUI        : true    // Silent mode or dialog\n      },\n      SETTINGS = {\n        name: SCRIPT.name.replace(/\\s/g, '_') + '_data.json',\n        folder: Folder.myDocuments + '/Adobe Scripts/'\n      };\n\n  if (!documents.length) {\n    alert('Error\\nOpen a document and try again');\n    return;\n  }\n\n  if (selection.typename === 'TextRange') return;\n\n  var isAltPressed = false;\n\n  if (ScriptUI.environment.keyboardState.altKey) {\n    isAltPressed = true;\n  }\n\n  if ((CFG.showUI && !isAltPressed) || (!CFG.showUI && isAltPressed)) { // Show dialog\n    invokeUI(SCRIPT, CFG, SETTINGS);\n  } else if (CFG.showUI && isAltPressed) { // Silent mode with the latest settings\n    var params = loadSettings(SETTINGS);\n    if (params.length) process(params[0], params[1], params[2], params[3]);\n  } else { // Silent mode with the default settings\n    process(CFG.isIsolateGrp, CFG.isGradient, CFG.isFill, CFG.isStroke);\n  }\n}\n\n/**\n * Save UI options to file\n * @param {Object} cfgFile - Settings file\n * @param {Array} params - Options status\n */\nfunction saveSettings(cfgFile, params) {\n  if(!Folder(cfgFile.folder).exists) Folder(cfgFile.folder).create();\n  var $file = new File(cfgFile.folder + cfgFile.name);\n  $file.encoding = 'UTF-8';\n  $file.open('w');\n  var pref = {};\n  pref.isIsolateGrp = params[0];\n  pref.isGradient = params[1];\n  pref.isFill = params[2];\n  pref.isStroke = params[3];\n  var data = pref.toSource();\n  $file.write(data);\n  $file.close();\n}\n\n/**\n * Load options from file\n * @param {Object} cfgFile - Settings file\n * @return {Array} out - Options status\n */\nfunction loadSettings(cfgFile) {\n  var out = [], $file = File(cfgFile.folder + cfgFile.name);\n  if ($file.exists) {\n    try {\n      $file.encoding = 'UTF-8';\n      $file.open('r');\n      var json = $file.readln();\n      var pref = new Function('return ' + json)();\n      $file.close();\n      if (typeof pref != 'undefined') {\n        out[0] = pref.isIsolateGrp;\n        out[1] = pref.isGradient;\n        out[2] = pref.isFill;\n        out[3] = pref.isStroke;\n      }\n    } catch (e) {}\n  }\n  return out;\n}\n\n/**\n * Show UI\n * @param {Object} title - The script name\n * @param {Object} cfg - Default settings\n * @param {Object} cfgFile - Settings file\n */\nfunction invokeUI(title, cfg, cfgFile) {\n  var params = loadSettings(cfgFile);\n\n  var dialog = new Window('dialog', title.name + ' ' + title.version);\n      dialog.orientation = 'column';\n      dialog.alignChildren = ['fill', 'center'];\n      dialog.opacity = .96;\n\n  var wrapper = dialog.add('panel');\n      wrapper.orientation = 'column';\n      wrapper.alignChildren = ['fill','top'];\n      wrapper.margins = 10;\n\n  var isIsolateGrp = wrapper.add('checkbox', undefined, 'Isolate Groups');\n      isIsolateGrp.value = params.length ? params[0] : cfg.isIsolateGrp;\n\n  var isGradient = wrapper.add('checkbox', undefined, 'Gradients Only');\n      isGradient.value = params.length ? params[1] : (cfg.isIsolateGrp ? false : cfg.isGradient);\n\n  var isFill = wrapper.add('checkbox', undefined, 'Fill Colors');\n      isFill.value = params.length ? params[2] : cfg.isFill;\n\n  var isStroke = wrapper.add('checkbox', undefined, 'Stroke Colors');\n      isStroke.value = params.length ? params[3] : cfg.isStroke;\n\n  var btns = dialog.add('group');\n      btns.orientation = 'column';\n      btns.alignChildren = ['fill', 'center'];\n\n  var cancel = btns.add('button', undefined, 'Cancel', { name: 'cancel' });\n  var ok = btns.add('button', undefined, 'Ok',  { name: 'ok' });\n\n  var copyright = dialog.add('statictext', undefined, 'Visit Github');\n      copyright.justify = 'center';\n\n  isIsolateGrp.onClick = function() {\n    if (this.value) isGradient.value = false;\n  }\n\n  isGradient.onClick = function() {\n    if (this.value) isIsolateGrp.value = false;\n  }\n\n  cancel.onClick = dialog.close;\n\n  ok.onClick = function() {\n    var params = [isIsolateGrp.value, isGradient.value, isFill.value, isStroke.value];\n    saveSettings(cfgFile, params);\n    process(params[0], params[1], params[2], params[3]);\n    dialog.close();\n  }\n\n  copyright.addEventListener('mousedown', function () {\n    openURL('https://github.com/creold');\n  });\n\n  dialog.center();\n  dialog.show();\n}\n\n/**\n * Run processing \n * @param {boolean} isIsolateGrp - Groups separately\n * @param {boolean} isGradient - Only gradients to solid colors\n * @param {boolean} isFill - Averaging fills\n * @param {boolean} isStroke - Averaging strokes\n */\nfunction process(isIsolateGrp, isGradient, isFill, isStroke) {\n  var groups;\n\n  if (!selection.length) {\n    var isConfirm = confirm('Selection is empty\\n' +\n                    'Process all visible unlocked groups\\n' +\n                    'in the document?');\n    \n    if (isConfirm) {\n      app.executeMenuCommand('selectall');\n      groups = getGroups(selection);\n      app.executeMenuCommand('deselectall');\n    } else {\n      return; // Exit\n    }\n  } else {\n    var paths = getPaths(selection, isIsolateGrp);\n\n    if (paths.length) {\n      if (isFill) {\n        if (isGradient) recolorGradients(paths, 'fillColor');\n        else recolor(paths, 'fillColor');\n      }\n  \n      if (isStroke) {\n        if (isGradient) recolorGradients(paths, 'strokeColor');\n        else recolor(paths, 'strokeColor');\n      }\n    }\n\n    if (!isIsolateGrp) return; // Exit\n\n    groups = getGroups(selection);\n  }\n\n  // Process groups separately\n  forEach(groups, function(e) {\n    var grpPaths = getPaths(e.pageItems, false);\n\n    if (isFill) recolor(grpPaths, 'fillColor');\n    if (isStroke) recolor(grpPaths, 'strokeColor');\n  });\n}\n\n/**\n * Get top-level groups\n * @param {(Object|Array)} collection - PageItems set\n * @return {Array} out - Top-Level groups\n */\nfunction getGroups(collection) {\n  var out = [];\n\n  forEach(collection, function(e) {\n    if (/group/i.test(e.typename)) out.push(e);\n  });\n\n  return out;\n}\n\n/**\n * Get paths in group\n * @param {(Object|Array)} collection - PageItems set\n * @param {boolean} isIsolateGrp - Include group content\n * @return {Array} out - Single paths\n */\nfunction getPaths(collection, isIsolateGrp) {\n  var out = [];\n\n  forEach(collection, function(e) {\n    if (e.pageItems && e.pageItems.length && !isIsolateGrp) {\n      out = [].concat(out, getPaths(e.pageItems));\n    } else if (/compound/i.test(e.typename) && e.pathItems.length) {\n      out = [].concat(out, getPaths(e.pathItems));\n    } else if (/pathitem/i.test(e.typename)) {\n      out.push(e);\n    }\n  });\n\n  return out;\n}\n\n/**\n * Recolor objects\n * @param {Array} collection - Paths\n * @param {string} type - Color property for the path\n */\nfunction recolor(collection, type) {\n  var colors = getColors(collection, type),\n      avgColor = averageColors(colors);\n\n  forEach(collection, function(e) {\n    if ((/fill/i.test(type) && e.filled) ||\n        (/stroke/i.test(type) && e.stroked)) {\n      e[type] = avgColor;\n    }\n  });\n}\n\n/**\n * Recolor only gradients separately\n * @param {Array} collection - Paths\n * @param {string} type - Color property for the path\n */\nfunction recolorGradients(collection, type) {\n  forEach(collection, function(e) {\n    if ((/fill/i.test(type) && e.filled && /gradient/i.test(e[type])) ||\n        (/stroke/i.test(type) && e.stroked && /gradient/i.test(e[type]))) {\n      var colors = getColors([e], type),\n      avgColor = averageColors(colors);\n      e[type] = avgColor;\n    }\n  });\n}\n\n/**\n * Get solid colors\n * @param {Array} collection - Paths\n * @param {string} type - Color property for the path\n * @return {Array} out - Colors \n */\nfunction getColors(collection, type) {\n  var out = [];\n\n  forEach(collection, function(e) {\n    var hasFill = /fill/i.test(type) && e.filled && !/pattern/i.test(e[type].typename),\n        hasStroke = /stroke/i.test(type) && e.stroked && !/pattern/i.test(e[type].typename);\n\n    if (!hasFill && !hasStroke) return;\n\n    if (/gradient/i.test(e[type].typename)) {\n      var gColor = e[type].gradient,\n          gLen = gColor.gradientStops.length;\n      for (var i = 0; i < gLen; i++) {\n        out.push(gColor.gradientStops[i].color);\n      }\n    } else {\n      out.push(e[type]);\n    }\n  });\n\n  return out;\n}\n\n/**\n * Average solid colors\n * @param {Array} colors - All paths colors\n * @return {object} avgColor - Average color\n */\nfunction averageColors(colors) {\n  var isRgb = activeDocument.documentColorSpace === DocumentColorSpace.RGB,\n      len = colors.length,\n      cSum = {}; // Sum of color channels\n\n  forEach(colors, function(e) {\n    if (/spot/i.test(e.typename)) e = getSpotTint(e);\n    if (/gray/i.test(e.typename)) e.red = e.green = e.blue = e.black = e.gray;\n    for (var key in e) {\n      if (typeof e[key] === 'number') {\n        if (cSum[key]) cSum[key] += e[key];\n        else cSum[key] = e[key];\n      }\n    }\n  });\n\n  var avgColor = isRgb ? new RGBColor() : new CMYKColor();\n  for (var key in cSum) {\n    avgColor[key] = Math.floor(cSum[key] / len);\n  }\n\n  return avgColor;\n}\n\n/**\n * Get true solid color from Spot\n * @param {Object} color - Spot color\n * @return {Object} Solid color\n */\nfunction getSpotTint(color) {\nvar isRgb = activeDocument.documentColorSpace === DocumentColorSpace.RGB,\n    white, tintVal = [];\n\n  if (isRgb) {\n    white = new RGBColor();\n    white.red = 255;\n    white.green = 255;\n    white.blue = 255;\n  } else {\n    white = new CMYKColor();\n  }\n\n  var t = color.tint / 100,\n      spot = color.spot.color;\n\n  for (var key in spot) {\n    if (typeof spot[key] === 'number') {\n      tintVal.push(lerp(white[key], spot[key], t));\n    }\n  }\n\n  return setColor(tintVal, isRgb);\n}\n\n/**\n * Calc linear interpolation\n * @param {number} start - Start value\n * @param {number} end - End value\n * @param {number} t - Percentage (value from 0.0 to 1.0)\n * @return {number} New value\n */\nfunction lerp(start, end, t) {\n  return start + (end - start) * t;\n}\n\n/**\n * Create color from array of values\n * @param {Array} arr - Channels values\n * @param {boolean} isRgb - Is the RGB document mode\n * @return {Object} color\n */\nfunction setColor(arr, isRgb) {\n  var color;\n\n  if (isRgb) {\n    color = new RGBColor();\n    color.red = arr[0];\n    color.green = arr[1];\n    color.blue = arr[2];\n  } else {\n    color = new CMYKColor();\n    color.cyan = arr[0];\n    color.magenta = arr[1];\n    color.yellow = arr[2];\n    color.black = arr[3];\n  }\n\n  return color;\n}\n\n/**\n * Calls a provided callback function once for each element in an array\n * @param {Array} collection - Elements\n * @param {Function} fn - The callback function\n */\nfunction forEach(collection, fn) {\n  for (var i = 0, len = collection.length; i < len; i++) {\n    fn(collection[i]);\n  }\n}\n\n/**\n * Open link in browser\n * @param {string} url - Website adress\n */\nfunction openURL(url) {\n  var html = new File(Folder.temp.absoluteURI + '/aisLink.html');\n  html.open('w');\n  var htmlBody = '<html><head><META HTTP-EQUIV=Refresh CONTENT=\"0; URL=' + url + '\"></head><body> <p></body></html>';\n  html.write(htmlBody);\n  html.close();\n  html.execute();\n}\n\ntry {\n  main();\n} catch (e) {}```\n")))}u.isMDXComponent=!0},3944:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/AverageColors-445974600b4434df10d1eaeb81687fd0.gif"}}]);